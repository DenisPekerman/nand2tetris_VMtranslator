------------------------------------------------------ARITHMETICS-------------------------------------------------------
### add
@SP                  Point to the stack pointer 
M=M-1                Decrement SP 
A=M                  Set A to the new top of the stack 
D=M                  Store the top value of the stack into D-register
A=A-1                Move A to the address of the second-to-top value 
D=D+M                Add the value from D to the value at the second-to-top 
M=D                  Store the result back in the second-to-top of the stack
----------------------------------------------------------------------------------------------------------------
### sub
@SP         Point to the stack pointer 
M=M-1       Decrement SP to move to the current top of the stack
A=M         Set A to the new top of the stack 
D=M         Store the value from the top of the stack into the D-register
A=A-1       Move A to the address of the second-to-top value 
D=M-D       Subtract the top value from the second-to-top value 
M=D         Store the result of the subtraction in the second-to-top position
----------------------------------------------------------------------------------------------------------------
### negation
@SP         Point to the stack pointer 
A=M-1       Set A to the address of the top of the stack 
M=-M        Negate the value at the top of the stack 
----------------------------------------------------------------------------------------------------------------
### eq/gt/lt
### type = JEQ/JGT/JLT
@SP                        Point to the stack pointer 
M=M-1                      Decrement SP 
A=M                        Set A to the new top of the stack 
D=M                        Store the top value of the stack into D-register
A=A-1                      Move A to the address of the second-to-top value
D=M-D                      Subtract the top value from the second-to-top value
@COMP_{self.line_number}   Jump to COMP_self.line_number if the result (D) is eq/gt/lt
D;{type}                   If D==0/D<0/D>0, jump to COMP_self.line_number
@SP                        If not jump, continue and set the result to 0
A=M-1                      Set A to the second-to-top value
M=0                        Set the result of the comparison to false (0) if not eq/gt/lt
@END_{self.line_number}    Jump to END_self.line_number to skip the true case
0;JMP                      Unconditional jump to END_self.line_number
(@COMP_{self.line_number}) Label for eq/gt/lt case
@SP                        Set A to the stack pointer 
A=M-1                      Point to the second-to-top value
M=-1                       Set the result to true (-1) if the values are eq/gt/lt
(END_{self.line_number})   End label for the comparison
----------------------------------------------------------------------------------------------------------------
### and/or
### operator = &/|
@SP                  Point to the stack pointer 
M=M-1                Decrement SP 
A=M                  Set A to the new top of the stack 
D=M                  Store the top value of the stack into D-register
A=A-1                Move A to the address of the second-to-top value 
M=D{operator}M       Perform a bitwise AND/OR between the top two values and store the result in the second-to-top position
----------------------------------------------------------------------------------------------------------------
### not
@SP         Point to the stack pointer 
A=M-1       Set A to the address of the top of the stack 
M=!M        Perform a bitwise NOT operation on the value at the top of the stack 
----------------------------------------------------------------------------------------------------------------



------------------------------------------------------------PUSH----------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------
### push static i
@{fileName}.{i}    Load the value from the memory location labeled fileName.i into the D-register
D=M                Store the value at {fileName}.{i} into the D-register
@SP                Point to the stack pointer 
A=M                Set A to the current top of the stack 
M=D                Store the value from D-register into the top of the stack
@SP                Point to the stack pointer again
M=M+1              Increment the stack pointer to reflect the pushed value
----------------------------------------------------------------------------------------------------------------
### push temp i
@5          Load the constant 5 into the A-register
D=A         Store the value 5 into the D-register
@i          Load the constant i into the A-register
D=D+A       Add i to the value in the D-register (D = 5 + i)
A=D         Set A to the result of the addition (A=5+i)
D=M         Load the value from the memory location at address 5+i into the D-register
@SP         Point to the stack pointer 
A=M         Set A to the current top of the stack 
M=D         Store the value from D-register into the top of the stack
@SP         Point to the stack pointer again
M=M+1       Increment the stack pointer to reflect the pushed value
----------------------------------------------------------------------------------------------------------------
### push segment i
### segment = local/argument/this/that
@segment        Load the value of the segment base into the D-register
D=M             Store the value of the base address into the D-register
@i              Load the constant i into the A-register
D=D+A           Add i to the base address stored in D 
A=D             Set A to the resulting address 
D=M             Load the value from the memory location at the calculated address into the D-register
@SP             Point to the stack pointer 
A=M             Set A to the current top of the stack 
M=D             Store the value from the D-register into the top of the stack
@SP             Point to the stack pointer again
M=M+1           Increment the stack pointer to reflect the pushed value
----------------------------------------------------------------------------------------------------------------
### push pointer 1
@THAT       Load the value of the `THAT` segment base into the D-register
D=M         Store the value from `THAT` (the base address) into the D-register
@SP         Point to the stack pointer 
A=M         Set A to the current top of the stack 
M=D         Store the value from the D-register into the top of the stack
@SP         Point to the stack pointer again
M=M+1       Increment the stack pointer to reflect the pushed value
----------------------------------------------------------------------------------------------------------------
### push pointer 0
@THIS       Load the value of the `THIS` segment base into the D-register
D=M         Store the value from `THIS` (the base address) into the D-register
@SP         Point to the stack pointer 
A=M         Set A to the current top of the stack 
M=D         Store the value from the D-register into the top of the stack
@SP         Point to the stack pointer again
M=M+1       Increment the stack pointer to reflect the pushed value
----------------------------------------------------------------------------------------------------------------
### push constant i
@i          Load the constant i into the A-register
D=A         Store the value i into the D-register
@SP         Point to the stack pointer 
A=M         Set A to the current top of the stack 
M=D         Store the value from the D-register into the top of the stack
@SP         Point to the stack pointer again
M=M+1       Increment the stack pointer to reflect the pushed value
----------------------------------------------------------------------------------------------------------------



----------------------------------------------------------------POP------------------------------------------------------------



----------------------------------------------------------------------------------------------------------------
### pop static i
@SP                 Point to the stack pointer 
M=M-1               Decrement SP to move to the current top of the stack
A=M                 Set A to the new top of the stack 
D=M                 Store the value from the top of the stack into the D-register
@{fileName}.{i}     Point to the memory location labeled {fileName}.{i}
M=D                 Store the value from the D-register into the memory location {fileName}.{i}
----------------------------------------------------------------------------------------------------------------
### pop temp i
@5                        Load the constant 5 into the A-register
D=A                       Store the value 5 into the D-register
@i                        Load the constant i into the A-register
D=D+A                     Add i to the value in the D-register (D = 5 + i)
@addr_{self.line_number}  Store the result in the memory location labeled `addr_{self.line_number}`
M=D                       Save the value 5+i into `addr_{self.line_number}`
@SP                       Point to the stack pointer 
M=M-1                     Decrement the stack pointer 
A=M                       Set A to the new top of the stack
D=M                       Store the top value of the stack into the D-register
@addr_{self.line_number}  Point to the memory location labeled `addr_{self.line_number}`
A=M                       Set A to the value stored in `addr_{self.line_number}`
M=D                       Store the value from the D-register into the memory location pointed by `addr_{self.line_number}`
----------------------------------------------------------------------------------------------------------------
### pop segment i
### segment = local/argument/this/that
@segment                  // Load the base address of the specified segment into the A-register
D=M                       // Store the base address from memory into the D-register
@i                        // Load the constant index 'i' into the A-register
D=D+A                     // Add index 'i' to the base address (D = segment base + i)
@addr_{line_num}          // Address to temporarily store the target address (replace {line_num} accordingly)
M=D                       // Save the calculated target address into addr_{line_num}
@SP                       // Access the stack pointer
M=M-1                     // Decrement the stack pointer to point to the new top of the stack
A=M                       // Set A to the address of the new top of the stack
D=M                       // Retrieve the value from the top of the stack into the D-register
@addr_{line_num}          // Access the stored target address
A=M                       // Set A to the target address (segment base + i)
M=D                       // Store the popped value into the target segment at index 'i'
----------------------------------------------------------------------------------------------------------------
### pop pointer 1
@SP         Decrement the stack pointer (SP--)
M=M-1
A=M         Set A to the new top of the stack 
D=M         Store the value from the top of the stack into the D-register
@THAT       Point to the `THAT` segment base address
M=D         Store the value from the D-register into the `THAT` segment
----------------------------------------------------------------------------------------------------------------
### pop pointer 0
@SP         Decrement the stack pointer 
M=M-1
A=M         Set A to the new top of the stack 
D=M         Store the value from the top of the stack into the D-register
@THIS       Point to the `THIS` segment base address
M=D         Store the value from the D-register into the `THIS` segment
--------------------------------------------------------------------------------------------------



------------------------------------------------BRTANCHING AND FUNCTION-------------------------------------------------



-----------------------------------------------------------------------------------------------------------------------
### label {label}
 (label)

 -------------------------------------------------------------------------------------------------------------
### goto {label}
 @label
 0;JMP

 ----------------------------------------------------------------------------------------------------------
### if-goto {label}
@SP             Select the stack pointer address
M=M-1           Decrement SP to point to the topmost element
A=M             Set A to the address contained in SP
D=M             Store the value at the top of the stack in D
@{label}        Set the address to the specified label
D;JNE           Jump to the label if D is not equal to zero
------------------------------------------------------------------------------------------------------------
### function {funcName} {nArg}
(funcName)          Declare the function label
~~~~ do the next 5 lines as many times as nArg ~~~
@SP                 Access the stack pointer
A=M                 Set A to the address contained in SP
M=0                 Initialize the current stack position to 0
@SP                 Access the stack pointer again
M=M+1               Increment the stack pointer to the next position
--------------------------------------------------------------------------------------------------------------
### call {funcName} {nArg}
@{function_name}$ret.{line_number}    // push return-address  
D=A  
@SP  
A=M  
M=D  
@SP  
M=M+1  
@LCL     // push LCL  
D=M  
@SP  
A=M  
M=D  
@SP  
M=M+1  
@ARG     // push ARG  
D=M  
@SP  
A=M  
M=D  
@SP  
M=M+1  
@THIS    // push THIS  
D=M  
@SP  
A=M  
M=D  
@SP  
M=M+1  
@THAT    // push THAT  
D=M  
@SP  
A=M  
M=D  
@SP  
M=M+1  
@SP      // ARG = SP-n-5  
D=M  
@{n_args}  
D=D-A  
@5  
D=D-A  
@ARG  
M=D  
@SP      // LCL = SP  
D=M  
@LCL  
M=D  
@{function_name}     // goto func  
0;JMP  
({function_name}$ret.{line_number})   //(return-address)
--------------------------------------------------------------------------------------------------------------
### return
@LCL        // FRAME = LCL  
D=M  
@frame  
M=D  
@5         // RET = *(FRAME-5)  
D=D-A  
A=D  
D=M  
@return_address  
M=D  
@SP        // *ARG = pop()  
M=M-1  
A=M  
D=M  
@ARG  
A=M  
M=D  
@ARG       // SP = ARG+1  
D=M+1  
@SP  
M=D  
@frame     // THAT = *(FRAME-1)  
D=M-1  
A=D  
D=M  
@THAT  
M=D  
@2         // THIS = *(FRAME-2)
D=A  
@frame  
D=M-D  
A=D  
D=M  
@THIS  
M=D         
@3         // ARG = *(FRAME-3) 
D=A  
@frame  
D=M-D  
A=D  
D=M  
@ARG  
M=D   
@4        // LCL = *(FRAME-4)
D=A  
@frame  
D=M-D  
A=D  
D=M  
@LCL  
M=D   
@return_address    // goto RET
A=M  
0;JMP 









